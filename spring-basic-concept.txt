## 스프링 핵심 원리 - 기본편


* 2022-10-31

    스프링의 탄생 
    - 로드 존슨이 책 출간 
    - EJB(Enterprise Java Bean)의 문제점 지적 
    - 30,000 라인 이상의 기반 기술을 예제 코드로 작성
	- 유겐 휠러가 대부분의 스프링 핵심 코드 개발
	- J2EE(EJB) 겨울을 넘어 새로운 시작이라는 뜻으로 지음
	
	스프링의 진짜 핵심 
	- 스프링은 자바 언어 기반의 프레임워크 
	- 자바 언어의 가장 큰 특징(객체 지향 언어)
	- 스프링은 객체 지향 언어가 가진 강력한 특징을 살려내는 프레임워크
	- 스프링은 좋은 객체 지향 애플리케이션을 개발 할 수 있게 도와주는 프레임워크
	
	좋은 객체 지향 프로그래밍?
	- 추상화, 캡슐화, 상속, 다형성
	- 객체 지향 프로그래밍
	  - 즉 "객체"들의 모임으로 파악하고자 하는 것이며 각각의 객체는 메세지를 주고받고 데이터 처리
	  - 프로그램을 유연하고 변경이 용이
	    - 유연하고 변경이 용이?
		  - 컴포넌트를 쉽고 유연하게 변경하면서 개발할 수 있는 방법
		  
	  다형성
      - 역할(인터페이스)과 구현(클래스, 구현 객체)으로 구분하면 세상이 단순해지고 유연해지며 편리해짐
	    - 클라이언트는 대상의 역할(인터페이스)만 알면 됨
		- 클라이언트는 구현 대상의 내부 구조를 몰라도 됨
		- 클라이언트는 구현 대상의 내부 구조가 변경되어도 영향을 받지 않음
		- 클라이언트는 구현 대상 자체를 변경해도 영향을 받지 않음

	  e.g : 뮤지컬 공연 역할 대체가 원활하게 되어야 함(로미오 - 줄리엣, 운전자 - 자동차)
      - 객체 설계시 역할(인터페이스)을 먼저 부여하고, 그 역할을 수행하는 구현 객체 만들기
	  - 클라이언트: 요청, 서버: 응답
	  - 클라이언트를 변경하지 않고, 서버의 구현 기능을 유연하게 변경 가능
	  - 역할(인터페이스) 자체가 변하면 클라이언트 서버 모두에 큰 변경이 발생함

	  스프링과 객체 지향
	  - 다형성이 가장 중요
	  - 제어의 역전(IoC), 의존관계 주입(DI)은 다형성을 활용해서 역할과 구현을 편리하게 다룰 수 있도록 지원
	  - 스프링을 통해 구현을 편리하게 변경 할 수 있다.

	  클린코드로 유명한 좋은 객체 지향 설계의 5가지 원칙(SOLID)
	  - SRP: 단일 책임 원칙(single responsibility principle)
	  - OCP: 개방-폐쇄 원칙 (Open/closed principle)
	  - LSP: 리스코프 치환 원칙 (Liskov substitution principle)
	  - ISP: 인터페이스 분리 원칙 (Interface segregation principle)
	  - DIP: 의존관계 역전 원칙 (Dependency inversion principle)

	  * SRP: 단일 책임 원칙(single responsibility principle)
              - 한 클래스는 하나의 책임만 가져야 한다.
              - 하나의 책임이라는 것은 모호하다.
                  - 클 수 있고 작을 수도 있다.
                  - 문맥과 상황에 따라 다르다. 
              - 중요한 기준은 변경이다. (변경이 있을 때 파급 효과가 적으면 단일 책임 원칙을 잘 따른 것)
              - 예) UI 변경, 객체의 생성과 사용을 분리

	  * OCP: 개방-폐쇄 원칙 (Open/closed principle)
              - 소프트웨어 요소는 확장에는 열려 있으나 변경에는 닫혀 있어야 한다.
              - 다형성을 활용
              - 인터페이스를 구현한 새로운 클래스를 하나 만들어서 새로운 기능을 구현 
       
	  * LSP: 리스코프 치환 원칙 (Liskov substitution principle)
              - 프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 한다.
                  즉, 엑셀은 무조건 앞으로 (기능에 대한 보장)

	  * ISP: 인터페이스 분리 원칙 (Interface segregation principle)
              - 특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다
              - 자동차 인터페이스 -> 운전 인터페이스, 정비 인터페이스로 분리 
              - 사용자 클라이언트 -> 운전자 클라이언트, 정비사 클라이언트로 분리 
              - 분리하면 정비 인터페이스 자체가 변해도 운전자 클라이언트에 영향을 주지 않음
              - 인터페이스가 명확해지고, 대체 가능성이 높아진다.

	  * DIP: 의존관계 역전 원칙 (Dependency inversion principle)
              - 프로그래머는 "추상화에 의존해야지, 구체화에 의존하면 안된다." 
              - 쉽게 이야기해서 구현 클래스에 의존하지 말고, 인터페이스에 의존하라는 뜻
              - 앞에서 이야기한 역할(Role)에 의존하게 해야 한다는 것과 같다. 
                  - 객체 세상도 클라이언트가 인터페이스에 의존해야 유연하게 구현체를 변경할 수 있다! 구현체에 의존하게 되면 변경이 아주 어려워진다.

	  * 정리
              - 객체 지향의 핵심 : 다형성
              - 다형성 만으로는 쉽게 부품을 갈아 끼우듯이 개발 할 수 없다.
              - 다형성 만으로는 구현 객체를 변경할 때 클라이언트 코드도 함께 변경된다.
              - 다형성 만으로는 OCP,DIP를 지킬 수 없다.

	객체 지향 설계와 스프링
            - 스프링은 다형성 + OCP, DIP를 가능하게 지원  
                - DI : 의존관계(의존성 주입)
                - DI 컨테이너 제공
            - 클라이언트 코드의 변경 없이 기능 확장 
            - 쉽게 부품을 교체하듯이 개발

	  * 정리
              - 모든 설계에 역할과 구현을 분리(자동차, 뮤지컬 역할의 예시)
              - 다형성 만으로는 쉽게 부품을 갈아 끼우듯이 개발 할 수 없다.
              - 애플리케이션 설계도 공연을 설계 하듯이 배역만 만들어두고, 배우는 언제든지 유연하게 변경할 수 있도록 만드는 것이 좋은 객체 지향 설계다.
              - 이상적으로는 모든 설계에 인터페이스를 부여하자